
'''

This example uses the getHistoricalData function to extract and plot a time series in Python.

DL = darren lefcoe

DL uses PAGE (for python) to make a nice GUI with Tkinter.
The builder is here: https://sourceforge.net/projects/page/

The user does not have to use this option and can directly copy and paste the code.

other GUI framework options are: PyQt, kivy, BeeWare, pyGame

Tkinter is the popular package.

'''


# imports for using matplotlib in Tkinter
import matplotlib
#matplotlib.use("TkAgg")
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAgg
from matplotlib.figure import Figure



import matplotlib.pyplot as plt
import numpy as np
import tradingeconomics as te




keyGiven = '5C45DD6C810D457:30FB510CFFAA4E7'
keyGuest = 'guest:guest'

#without a client key only a small sample of data will be given.
te.login(keyGiven)



# country and indicator
countrySelect = 'United states'
IndicatorSelect = 'Imports'


#plot a simple chart
mydata = te.getHistoricalData(country = countrySelect, indicator = IndicatorSelect)

plt.title(countrySelect + " - " + IndicatorSelect)
plt.grid(True)
plt.ylabel("Indicator - " + IndicatorSelect)
plt.xlabel("Historical dates")

plt.plot(mydata)
plt.show()






'''


Tkinter code generated by the GUI goes here:

    
'''



#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.24.1
#  in conjunction with Tcl version 8.6
#    Jun 26, 2019 11:46:02 AM BST  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True



import darrenTest01_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    darrenTest01_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    darrenTest01_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

    
#def buttonClicked():
#    print('the button was clicked')
    



class Toplevel1:
    def buttonClicked(self):
        print('the button was clicked')
        countryToUse = self.Entry2.get()
        indicToUse = self.Entry1.get()
        self.Message1.configure(text='The button was clicked... \r----------\rThe country selected is: ' + countryToUse +' \r----------\r The indicataor selected is: ' + indicToUse)
        
        
        print('plotting: ' + countryToUse + ' with ' + indicToUse)
        
        #plot a simple chart
        mydata = te.getHistoricalData(country = countryToUse, indicator = indicToUse)

        plt.title(countryToUse + " - " + indicToUse)
        plt.grid(True)
        plt.ylabel("Indicator - " + indicToUse)
        plt.xlabel("Historical dates")
        
        plt.plot(mydata)
        plt.show()
        
        # invoke the chartPage class.
        chartPage(mydata, countryToUse, indicToUse)
        
        
    
    def showPlotImage():
        print('hello')
        

    
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
#        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
#        _fgcolor = '#000000'  # X11 color: 'black'
#        _compcolor = '#d9d9d9' # X11 color: 'gray85'
#        _ana1color = '#d9d9d9' # X11 color: 'gray85'
#        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("600x450+650+150")
        top.title("TE - Historical Data GUI")
        top.configure(background="#d9d9d9")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.15, rely=0.178, height=46, width=140)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''Country''')
        self.Label1.configure(width=140)

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.15, rely=0.311, height=46, width=140)
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''Indicator''')
        self.Label2.configure(width=140)

        self.Button1 = tk.Button(top, command = self.buttonClicked)
        self.Button1.place(relx=0.15, rely=0.644, height=53, width=156)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Get Historical Data''')
        self.Button1.configure(width=156)
         
 
        self.Entry2 = tk.Entry(top)
        self.Entry2.place(relx=0.57, rely=0.2,height=24, relwidth=0.34)
        self.Entry2.configure(background="white")
        self.Entry2.configure(disabledforeground="#a3a3a3")
        self.Entry2.configure(font="TkFixedFont")
        self.Entry2.configure(foreground="#000000")
        self.Entry2.configure(insertbackground="black")
        self.Entry2.insert(0, countrySelect)
 
        self.Entry1 = tk.Entry(top)
        self.Entry1.place(relx=0.57, rely=0.333,height=24, relwidth=0.34)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.insert(0, IndicatorSelect)


        self.Message1 = tk.Message(top)
        self.Message1.place(relx=0.567, rely=0.622, relheight=0.222, relwidth=0.343)
        self.Message1.configure(background="#d9d9d9")
        self.Message1.configure(foreground="#000000")
        self.Message1.configure(highlightbackground="#d9d9d9")
        self.Message1.configure(highlightcolor="black")
        self.Message1.configure(text='''GUI for historical data
Trading Economics

By. DL''')
        self.Message1.configure(width=206)

        
        


def chartPage(mydata, countryToUse, indicToUse):
    ''' print the chart  '''
    
    root = tk.Tk()

    w = tk.Label(root, text="- - - Graph Page - - -", font=("Helvetica", 16))
    w.pack()
    w = tk.Label(root, text="A chart of " + countryToUse + " - " + indicToUse)
    w.pack()
    
    f = Figure(figsize=(7,7), dpi=60)
    
#    f.title(countryToUse + " - " + indicToUse)
#    f.grid(True)
#    f.ylabel("Indicator - " + indicToUse)
#    f.xlabel("Historical dates")

    a = f.add_subplot(111)

    a.plot(mydata)


    canvas = FigureCanvasTkAgg(f, root)
    canvas.show()
    canvas.get_tk_widget().pack(side=tk.BOTTOM, fill=tk.BOTH, expand=True)

    toolbar = NavigationToolbar2TkAgg(canvas,root)
    toolbar.update()
    canvas._tkcanvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

        
    root.mainloop()
    


        

if __name__ == '__main__':
    vp_start_gui()



